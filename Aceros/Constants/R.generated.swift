//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Gotham-Black.otf`.
    static let gothamBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Black", pathExtension: "otf")
    /// Resource file `Gotham-Bold.otf`.
    static let gothamBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Bold", pathExtension: "otf")
    /// Resource file `Gotham-Light.otf`.
    static let gothamLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Light", pathExtension: "otf")
    /// Resource file `Gotham-Medium.otf`.
    static let gothamMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Medium", pathExtension: "otf")
    /// Resource file `Gotham-Regular.otf`.
    static let gothamRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Regular", pathExtension: "otf")
    
    /// `bundle.url(forResource: "Gotham-Black", withExtension: "otf")`
    static func gothamBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham-Bold", withExtension: "otf")`
    static func gothamBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham-Light", withExtension: "otf")`
    static func gothamLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham-Medium", withExtension: "otf")`
    static func gothamMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham-Regular", withExtension: "otf")`
    static func gothamRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `Gotham-Bold`.
    static let gothamBold = Rswift.FontResource(fontName: "Gotham-Bold")
    /// Font `Gotham-Light`.
    static let gothamLight = Rswift.FontResource(fontName: "Gotham-Light")
    /// Font `Gotham-Medium`.
    static let gothamMedium = Rswift.FontResource(fontName: "Gotham-Medium")
    
    /// `UIFont(name: "Gotham-Bold", size: ...)`
    static func gothamBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamBold, size: size)
    }
    
    /// `UIFont(name: "Gotham-Light", size: ...)`
    static func gothamLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamLight, size: size)
    }
    
    /// `UIFont(name: "Gotham-Medium", size: ...)`
    static func gothamMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamMedium, size: size)
    }
    
    static func validate() throws {
      if R.font.gothamMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Medium' could not be loaded, is 'Gotham-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Light' could not be loaded, is 'Gotham-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Bold' could not be loaded, is 'Gotham-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 29 images.
  struct image {
    /// Image `Client_name_background`.
    static let client_name_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Client_name_background")
    /// Image `ic_add_client`.
    static let ic_add_client = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_client")
    /// Image `ic_back_btn`.
    static let ic_back_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_btn")
    /// Image `ic_burger`.
    static let ic_burger = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_burger")
    /// Image `ic_calendar_native`.
    static let ic_calendar_native = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar_native")
    /// Image `ic_camera_big`.
    static let ic_camera_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_big")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_check_point_blue`.
    static let ic_check_point_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_point_blue")
    /// Image `ic_check_point_green`.
    static let ic_check_point_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_point_green")
    /// Image `ic_client_map copy 6`.
    static let ic_client_mapCopy6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_client_map copy 6")
    /// Image `ic_clients_side_m`.
    static let ic_clients_side_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clients_side_m")
    /// Image `ic_cross_img`.
    static let ic_cross_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross_img")
    /// Image `ic_dd_blk_small`.
    static let ic_dd_blk_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_blk_small")
    /// Image `ic_fetch_loc`.
    static let ic_fetch_loc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fetch_loc")
    /// Image `ic_history_side_m-1`.
    static let ic_history_side_m1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_history_side_m-1")
    /// Image `ic_history_side_m`.
    static let ic_history_side_m = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_history_side_m")
    /// Image `ic_hotel_blue`.
    static let ic_hotel_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hotel_blue")
    /// Image `ic_hotel_green`.
    static let ic_hotel_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hotel_green")
    /// Image `ic_hotel_pink`.
    static let ic_hotel_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hotel_pink")
    /// Image `ic_hotel_yellow`.
    static let ic_hotel_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hotel_yellow")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_m_location_pin`.
    static let ic_m_location_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_m_location_pin")
    /// Image `ic_next_small_blu`.
    static let ic_next_small_blu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next_small_blu")
    /// Image `ic_remove_img`.
    static let ic_remove_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_img")
    /// Image `ic_switch_off`.
    static let ic_switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_switch_off")
    /// Image `ic_switch_on-1`.
    static let ic_switch_on1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_switch_on-1")
    /// Image `ic_switch_on`.
    static let ic_switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_switch_on")
    /// Image `illustration_location`.
    static let illustration_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "illustration_location")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    
    /// `UIImage(named: "Client_name_background", bundle: ..., traitCollection: ...)`
    static func client_name_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.client_name_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_client", bundle: ..., traitCollection: ...)`
    static func ic_add_client(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_client, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_btn", bundle: ..., traitCollection: ...)`
    static func ic_back_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_burger", bundle: ..., traitCollection: ...)`
    static func ic_burger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_burger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar_native", bundle: ..., traitCollection: ...)`
    static func ic_calendar_native(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar_native, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_big", bundle: ..., traitCollection: ...)`
    static func ic_camera_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_point_blue", bundle: ..., traitCollection: ...)`
    static func ic_check_point_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_point_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_point_green", bundle: ..., traitCollection: ...)`
    static func ic_check_point_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_point_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_client_map copy 6", bundle: ..., traitCollection: ...)`
    static func ic_client_mapCopy6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_client_mapCopy6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_clients_side_m", bundle: ..., traitCollection: ...)`
    static func ic_clients_side_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clients_side_m, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cross_img", bundle: ..., traitCollection: ...)`
    static func ic_cross_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dd_blk_small", bundle: ..., traitCollection: ...)`
    static func ic_dd_blk_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_blk_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fetch_loc", bundle: ..., traitCollection: ...)`
    static func ic_fetch_loc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fetch_loc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_history_side_m", bundle: ..., traitCollection: ...)`
    static func ic_history_side_m(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_history_side_m, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_history_side_m-1", bundle: ..., traitCollection: ...)`
    static func ic_history_side_m1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_history_side_m1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hotel_blue", bundle: ..., traitCollection: ...)`
    static func ic_hotel_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hotel_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hotel_green", bundle: ..., traitCollection: ...)`
    static func ic_hotel_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hotel_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hotel_pink", bundle: ..., traitCollection: ...)`
    static func ic_hotel_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hotel_pink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hotel_yellow", bundle: ..., traitCollection: ...)`
    static func ic_hotel_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hotel_yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_m_location_pin", bundle: ..., traitCollection: ...)`
    static func ic_m_location_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_m_location_pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_next_small_blu", bundle: ..., traitCollection: ...)`
    static func ic_next_small_blu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next_small_blu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_remove_img", bundle: ..., traitCollection: ...)`
    static func ic_remove_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_img, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_switch_off", bundle: ..., traitCollection: ...)`
    static func ic_switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_switch_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_switch_on", bundle: ..., traitCollection: ...)`
    static func ic_switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_switch_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_switch_on-1", bundle: ..., traitCollection: ...)`
    static func ic_switch_on1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_switch_on1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "illustration_location", bundle: ..., traitCollection: ...)`
    static func illustration_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration_location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `BuildingClientsTableViewCell`.
    static let buildingClientsTableViewCell = _R.nib._BuildingClientsTableViewCell()
    /// Nib `BuildingIconView`.
    static let buildingIconView = _R.nib._BuildingIconView()
    /// Nib `ClientsListTableViewCell`.
    static let clientsListTableViewCell = _R.nib._ClientsListTableViewCell()
    /// Nib `CompanyAddedTableViewCell`.
    static let companyAddedTableViewCell = _R.nib._CompanyAddedTableViewCell()
    /// Nib `MIDatePicker`.
    static let miDatePicker = _R.nib._MIDatePicker()
    /// Nib `QuestionsTableViewCell`.
    static let questionsTableViewCell = _R.nib._QuestionsTableViewCell()
    /// Nib `SearchTableViewCell`.
    static let searchTableViewCell = _R.nib._SearchTableViewCell()
    /// Nib `SettingTableViewCell`.
    static let settingTableViewCell = _R.nib._SettingTableViewCell()
    
    /// `UINib(name: "BuildingClientsTableViewCell", in: bundle)`
    static func buildingClientsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buildingClientsTableViewCell)
    }
    
    /// `UINib(name: "BuildingIconView", in: bundle)`
    static func buildingIconView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buildingIconView)
    }
    
    /// `UINib(name: "ClientsListTableViewCell", in: bundle)`
    static func clientsListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clientsListTableViewCell)
    }
    
    /// `UINib(name: "CompanyAddedTableViewCell", in: bundle)`
    static func companyAddedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.companyAddedTableViewCell)
    }
    
    /// `UINib(name: "MIDatePicker", in: bundle)`
    static func miDatePicker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.miDatePicker)
    }
    
    /// `UINib(name: "QuestionsTableViewCell", in: bundle)`
    static func questionsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionsTableViewCell)
    }
    
    /// `UINib(name: "SearchTableViewCell", in: bundle)`
    static func searchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableViewCell)
    }
    
    /// `UINib(name: "SettingTableViewCell", in: bundle)`
    static func settingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddPhotosCollectionViewCellAdd`.
    static let addPhotosCollectionViewCellAdd: Rswift.ReuseIdentifier<AddPhotosCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddPhotosCollectionViewCellAdd")
    /// Reuse identifier `AddPhotosCollectionViewCellUploaded`.
    static let addPhotosCollectionViewCellUploaded: Rswift.ReuseIdentifier<AddPhotosCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddPhotosCollectionViewCellUploaded")
    /// Reuse identifier `AddPhotosCollectionViewCell`.
    static let addPhotosCollectionViewCell: Rswift.ReuseIdentifier<AddPhotosCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddPhotosCollectionViewCell")
    /// Reuse identifier `ClientsListTableViewCell`.
    static let clientsListTableViewCell: Rswift.ReuseIdentifier<ClientsListTableViewCell> = Rswift.ReuseIdentifier(identifier: "ClientsListTableViewCell")
    /// Reuse identifier `CompanyAddedTableViewCell`.
    static let companyAddedTableViewCell: Rswift.ReuseIdentifier<CompanyAddedTableViewCell> = Rswift.ReuseIdentifier(identifier: "CompanyAddedTableViewCell")
    /// Reuse identifier `QuestionsTableViewCell`.
    static let questionsTableViewCell: Rswift.ReuseIdentifier<QuestionsTableViewCell> = Rswift.ReuseIdentifier(identifier: "QuestionsTableViewCell")
    /// Reuse identifier `SearchTableViewCell`.
    static let searchTableViewCell: Rswift.ReuseIdentifier<SearchTableViewCell> = Rswift.ReuseIdentifier(identifier: "SearchTableViewCell")
    /// Reuse identifier `SettingTableViewCell`.
    static let settingTableViewCell: Rswift.ReuseIdentifier<SettingTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingTableViewCell")
    /// Reuse identifier `TimelineTableViewCell`.
    static let timelineTableViewCell: Rswift.ReuseIdentifier<TimelineTableViewCell> = Rswift.ReuseIdentifier(identifier: "TimelineTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `LeftPanel`.
    static let leftPanel = _R.storyboard.leftPanel()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LeftPanel", bundle: ...)`
    static func leftPanel(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.leftPanel)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 30 localization keys.
    struct localizable {
      /// Value: All fields are necessary!
      static let popFieldsNecessary = Rswift.StringResource(key: "pop.fieldsNecessary", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Already Day-out
      static let panelAlreadyDayOut = Rswift.StringResource(key: "panel.alreadyDayOut", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Check In added successfully.
      static let popCheckInSuccess = Rswift.StringResource(key: "pop.checkInSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Check in history
      static let panelMenuCheckHistory = Rswift.StringResource(key: "panel.menuCheckHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CheckIn Address
      static let checkInCheckInAddress = Rswift.StringResource(key: "checkIn.CheckInAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Checked In
      static let profileCheckedIn = Rswift.StringResource(key: "profile.checkedIn", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Client added successfully.
      static let popClientAdded = Rswift.StringResource(key: "pop.clientAdded", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Clients
      static let panelMenuClients = Rswift.StringResource(key: "panel.menuClients", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Day In
      static let profileDayIn = Rswift.StringResource(key: "profile.dayIn", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Day-out
      static let panelDayOut = Rswift.StringResource(key: "panel.dayOut", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Day-out
      static let panelMenuDayOut = Rswift.StringResource(key: "panel.menuDayOut", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Location Alert!
      static let popLocTitle = Rswift.StringResource(key: "pop.locTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No CheckIn history for this day.
      static let historyNoHistory = Rswift.StringResource(key: "history.noHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No client name matches this keyword. Try searching other keyword.
      static let popNosearchReasult = Rswift.StringResource(key: "pop.nosearchReasult", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No clients available.
      static let popNoClientsAvailable = Rswift.StringResource(key: "pop.noClientsAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No clients in this building
      static let popNoClinetsInBuilding = Rswift.StringResource(key: "pop.noClinetsInBuilding", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Not available
      static let profileNotAvailable = Rswift.StringResource(key: "profile.notAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please add one or more photos!
      static let popAddPhoto = Rswift.StringResource(key: "pop.addPhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter username and password
      static let popNoUsernamePassword = Rswift.StringResource(key: "pop.noUsernamePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Setting
      static let popSetting = Rswift.StringResource(key: "pop.setting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today
      static let titleToday = Rswift.StringResource(key: "title.today", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today,
      static let panelToday = Rswift.StringResource(key: "panel.today", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unable to get your current location.
      static let popNoLocation = Rswift.StringResource(key: "pop.noLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome
      static let homeWelcome = Rswift.StringResource(key: "home.welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are at
      static let profileYouAreAt = Rswift.StringResource(key: "profile.YouAreAt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can not add more than 5 photos.
      static let popImageLimit = Rswift.StringResource(key: "pop.imageLimit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have already dayout.
      static let panelMsgDayout = Rswift.StringResource(key: "panel.msgDayout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have been successfully day out.
      static let popDayOutSucceess = Rswift.StringResource(key: "pop.dayOutSucceess", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your profile has been updated successfully.
      static let popProfileUpdateSuccess = Rswift.StringResource(key: "pop.profileUpdateSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: day Out
      static let profileDayOut = Rswift.StringResource(key: "profile.dayOut", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: All fields are necessary!
      static func popFieldsNecessary(_: Void = ()) -> String {
        return NSLocalizedString("pop.fieldsNecessary", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Already Day-out
      static func panelAlreadyDayOut(_: Void = ()) -> String {
        return NSLocalizedString("panel.alreadyDayOut", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Check In added successfully.
      static func popCheckInSuccess(_: Void = ()) -> String {
        return NSLocalizedString("pop.checkInSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Check in history
      static func panelMenuCheckHistory(_: Void = ()) -> String {
        return NSLocalizedString("panel.menuCheckHistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CheckIn Address
      static func checkInCheckInAddress(_: Void = ()) -> String {
        return NSLocalizedString("checkIn.CheckInAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Checked In
      static func profileCheckedIn(_: Void = ()) -> String {
        return NSLocalizedString("profile.checkedIn", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Client added successfully.
      static func popClientAdded(_: Void = ()) -> String {
        return NSLocalizedString("pop.clientAdded", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Clients
      static func panelMenuClients(_: Void = ()) -> String {
        return NSLocalizedString("panel.menuClients", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Day In
      static func profileDayIn(_: Void = ()) -> String {
        return NSLocalizedString("profile.dayIn", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Day-out
      static func panelDayOut(_: Void = ()) -> String {
        return NSLocalizedString("panel.dayOut", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Day-out
      static func panelMenuDayOut(_: Void = ()) -> String {
        return NSLocalizedString("panel.menuDayOut", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Location Alert!
      static func popLocTitle(_: Void = ()) -> String {
        return NSLocalizedString("pop.locTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No CheckIn history for this day.
      static func historyNoHistory(_: Void = ()) -> String {
        return NSLocalizedString("history.noHistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No client name matches this keyword. Try searching other keyword.
      static func popNosearchReasult(_: Void = ()) -> String {
        return NSLocalizedString("pop.nosearchReasult", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No clients available.
      static func popNoClientsAvailable(_: Void = ()) -> String {
        return NSLocalizedString("pop.noClientsAvailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No clients in this building
      static func popNoClinetsInBuilding(_: Void = ()) -> String {
        return NSLocalizedString("pop.noClinetsInBuilding", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Not available
      static func profileNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("profile.notAvailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please add one or more photos!
      static func popAddPhoto(_: Void = ()) -> String {
        return NSLocalizedString("pop.addPhoto", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter username and password
      static func popNoUsernamePassword(_: Void = ()) -> String {
        return NSLocalizedString("pop.noUsernamePassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Setting
      static func popSetting(_: Void = ()) -> String {
        return NSLocalizedString("pop.setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today
      static func titleToday(_: Void = ()) -> String {
        return NSLocalizedString("title.today", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today,
      static func panelToday(_: Void = ()) -> String {
        return NSLocalizedString("panel.today", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unable to get your current location.
      static func popNoLocation(_: Void = ()) -> String {
        return NSLocalizedString("pop.noLocation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welcome
      static func homeWelcome(_: Void = ()) -> String {
        return NSLocalizedString("home.welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are at
      static func profileYouAreAt(_: Void = ()) -> String {
        return NSLocalizedString("profile.YouAreAt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can not add more than 5 photos.
      static func popImageLimit(_: Void = ()) -> String {
        return NSLocalizedString("pop.imageLimit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have already dayout.
      static func panelMsgDayout(_: Void = ()) -> String {
        return NSLocalizedString("panel.msgDayout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have been successfully day out.
      static func popDayOutSucceess(_: Void = ()) -> String {
        return NSLocalizedString("pop.dayOutSucceess", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your profile has been updated successfully.
      static func popProfileUpdateSuccess(_: Void = ()) -> String {
        return NSLocalizedString("pop.profileUpdateSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: day Out
      static func profileDayOut(_: Void = ()) -> String {
        return NSLocalizedString("profile.dayOut", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BuildingIconView.validate()
    }
    
    struct _BuildingClientsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BuildingClientsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BuildingClientsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuildingClientsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BuildingIconView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BuildingIconView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BuildingIconView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuildingIconView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_hotel_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hotel_blue' is used in nib 'BuildingIconView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ClientsListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClientsListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ClientsListTableViewCell"
      let name = "ClientsListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClientsListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClientsListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CompanyAddedTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CompanyAddedTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CompanyAddedTableViewCell"
      let name = "CompanyAddedTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CompanyAddedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CompanyAddedTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MIDatePicker: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MIDatePicker"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MIDatePicker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MIDatePicker
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QuestionsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "QuestionsTableViewCell"
      let name = "QuestionsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QuestionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchTableViewCell"
      let name = "SearchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingTableViewCell"
      let name = "SettingTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try leftPanel.validate()
      try launchScreen.validate()
    }
    
    struct launch: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Launch"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct leftPanel: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addClientViewController = StoryboardViewControllerResource<AddClientViewController>(identifier: "AddClientViewController")
      let bundle = R.hostingBundle
      let clientDetailViewController = StoryboardViewControllerResource<ClientDetailViewController>(identifier: "ClientDetailViewController")
      let clientsListViewController = StoryboardViewControllerResource<ClientsListViewController>(identifier: "ClientsListViewController")
      let clientsViewController = StoryboardViewControllerResource<ClientsViewController>(identifier: "ClientsViewController")
      let name = "LeftPanel"
      
      func addClientViewController(_: Void = ()) -> AddClientViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addClientViewController)
      }
      
      func clientDetailViewController(_: Void = ()) -> ClientDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientDetailViewController)
      }
      
      func clientsListViewController(_: Void = ()) -> ClientsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientsListViewController)
      }
      
      func clientsViewController(_: Void = ()) -> ClientsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add_client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_client' is used in storyboard 'LeftPanel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_btn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_btn' is used in storyboard 'LeftPanel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dd_blk_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_blk_small' is used in storyboard 'LeftPanel', but couldn't be loaded.") }
        if _R.storyboard.leftPanel().clientsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientsViewController' could not be loaded from storyboard 'LeftPanel' as 'ClientsViewController'.") }
        if _R.storyboard.leftPanel().clientsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientsListViewController' could not be loaded from storyboard 'LeftPanel' as 'ClientsListViewController'.") }
        if _R.storyboard.leftPanel().addClientViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addClientViewController' could not be loaded from storyboard 'LeftPanel' as 'AddClientViewController'.") }
        if _R.storyboard.leftPanel().clientDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientDetailViewController' could not be loaded from storyboard 'LeftPanel' as 'ClientDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let forgotViewController = StoryboardViewControllerResource<ForgotViewController>(identifier: "ForgotViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      
      func forgotViewController(_: Void = ()) -> ForgotViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_btn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_btn' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().forgotViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotViewController' could not be loaded from storyboard 'Login' as 'ForgotViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let addCheckInViewController = StoryboardViewControllerResource<AddCheckInViewController>(identifier: "AddCheckInViewController")
      let addCompanyViewController = StoryboardViewControllerResource<AddCompanyViewController>(identifier: "AddCompanyViewController")
      let buildingDetailViewController = StoryboardViewControllerResource<BuildingDetailViewController>(identifier: "BuildingDetailViewController")
      let bundle = R.hostingBundle
      let checkInHistoryViewController = StoryboardViewControllerResource<CheckInHistoryViewController>(identifier: "CheckInHistoryViewController")
      let checkInPlacePickerViewController = StoryboardViewControllerResource<CheckInPlacePickerViewController>(identifier: "CheckInPlacePickerViewController")
      let homeMapViewController = StoryboardViewControllerResource<HomeMapViewController>(identifier: "HomeMapViewController")
      let leftMenuViewController = StoryboardViewControllerResource<LeftMenuViewController>(identifier: "LeftMenuViewController")
      let name = "Main"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let searchBuildingViewController = StoryboardViewControllerResource<SearchBuildingViewController>(identifier: "SearchBuildingViewController")
      let timelineViewController = StoryboardViewControllerResource<TimelineViewController>(identifier: "TimelineViewController")
      
      func addCheckInViewController(_: Void = ()) -> AddCheckInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCheckInViewController)
      }
      
      func addCompanyViewController(_: Void = ()) -> AddCompanyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCompanyViewController)
      }
      
      func buildingDetailViewController(_: Void = ()) -> BuildingDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: buildingDetailViewController)
      }
      
      func checkInHistoryViewController(_: Void = ()) -> CheckInHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkInHistoryViewController)
      }
      
      func checkInPlacePickerViewController(_: Void = ()) -> CheckInPlacePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkInPlacePickerViewController)
      }
      
      func homeMapViewController(_: Void = ()) -> HomeMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeMapViewController)
      }
      
      func leftMenuViewController(_: Void = ()) -> LeftMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuViewController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      func searchBuildingViewController(_: Void = ()) -> SearchBuildingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchBuildingViewController)
      }
      
      func timelineViewController(_: Void = ()) -> TimelineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: timelineViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_check_point_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_point_green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_btn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_btn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dd_blk_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_blk_small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remove_img") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_img' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_small_blu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_small_blu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "illustration_location") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'illustration_location' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_big") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_big' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calendar_native") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar_native' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fetch_loc") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fetch_loc' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_burger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_burger' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().checkInHistoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkInHistoryViewController' could not be loaded from storyboard 'Main' as 'CheckInHistoryViewController'.") }
        if _R.storyboard.main().leftMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuViewController' could not be loaded from storyboard 'Main' as 'LeftMenuViewController'.") }
        if _R.storyboard.main().searchBuildingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchBuildingViewController' could not be loaded from storyboard 'Main' as 'SearchBuildingViewController'.") }
        if _R.storyboard.main().homeMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeMapViewController' could not be loaded from storyboard 'Main' as 'HomeMapViewController'.") }
        if _R.storyboard.main().buildingDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'buildingDetailViewController' could not be loaded from storyboard 'Main' as 'BuildingDetailViewController'.") }
        if _R.storyboard.main().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Main' as 'ProfileViewController'.") }
        if _R.storyboard.main().checkInPlacePickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkInPlacePickerViewController' could not be loaded from storyboard 'Main' as 'CheckInPlacePickerViewController'.") }
        if _R.storyboard.main().timelineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'timelineViewController' could not be loaded from storyboard 'Main' as 'TimelineViewController'.") }
        if _R.storyboard.main().addCompanyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCompanyViewController' could not be loaded from storyboard 'Main' as 'AddCompanyViewController'.") }
        if _R.storyboard.main().addCheckInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCheckInViewController' could not be loaded from storyboard 'Main' as 'AddCheckInViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
